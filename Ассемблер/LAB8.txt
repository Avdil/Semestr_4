.model	small;                                              Указание модели памяти: указывает, что сегмент данных (он начинается с директивы.DATA) и сегмент кода (начинается с директивы.CODE) будут занимать не более одного сегмента ОЗУ ( 64 Кбайт). 

	.286;                                               разрешены команды 286-ого микропроцессора
	.data;                                              директива описывает обычный сегмент данных (переменных).
vd	db	'Eto put zapuska programmi:  ',10,13,'$';         Объявление строки 
	.code;                                              объявление сегмента кода
                                                            ; Метка входа в программу
start:
	mov bx, [ds:2ch];                                   пересылаем в регистр bx адрес среды окружения со
	mov cx, @data;                                        смещением 2ch в PSP , выводим сообщение 
	mov ds, cx; «Eto put zapuska programmi»;             адрес которого находится
	mov dx, offset vd;                                   в переменной vd c помощью
	mov ah, 9h;                                       9-ой функции 21-го прерывания 
	int 21h;
	mov ds, bx;                                          содержимое регистра bx пересылаем в сегментный регистр ds
	mov si, 0;                                          обнуляем содержимое si

k1:	mov dl,[ds:si];                                       Считываем поочередно символы из среды окружения 
	inc si;                                                до тех пор пока не встретим 00, если 00 тогда увеличиваем si  
	cmp dl,0;                                            на 2 (чтобы пропустить два байта «xx»,находящиеся перед 
	jne k1;                                              строкой запуска программы ), после выводим строку 
	mov dl,[ds:si];
	inc si;
	cmp dl,0;
	jne k1;
	add si,2;

k3:	mov dl,[ds:si];                                       так как увеличили si на единицу 
	cmp dl,0;                                             пересылаем в dl следующий символ, если dl =0  
	je k2;                                                 переходим к метке k2 
	mov ah,2h;                                             и завершаем программу 
	int 21h;                                                иначе увеличиваем si на 1 и возвращаемся в начало метки k3
	inc si;                                                 пока dl не будет равно 0 
	jmp k3;

k2:	mov ah,4ch; Завершение программы 
	int 21h;
	end start;
